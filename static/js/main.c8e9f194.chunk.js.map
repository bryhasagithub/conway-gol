{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Box","props","selectBox","row","col","bind","className","this","boxClass","id","boxId","onClick","Component","Buttons","butArray","buttons","map","obj","i","push","eventHandler","key","name","Grid","rowArr","rowNum","j","colNum","gridArr","style","gridTemplateColumns","grid_err","console","log","App","array","gridCopy","Array","state","rows","fill","cols","JSON","parse","stringify","setState","gridArray","autoMaxGrid","Math","floor","window","innerWidth","innerHeight","user_rows","user_cols","clearEv","randomize","pauseGame","clearInterval","interval","playGame","setInterval","playFn","speed","toggleActiveState","isActive","randomizeEv","init_board","gens","setRows","event","preventDefault","target","value","setCols","setSpeed","count","slice","filter","Boolean","length","newGrid","random","generateGrid","type","onChange","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8e9f194.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Box extends Component{\n  constructor(props) {\n    super(props)\n    this.selectBox = this.selectBox.bind(this)\n  }\n  selectBox = () => {\n    this.props.selectBox(this.props.row, this.props.col);\n  }\n  render(){\n    return(\n      <div className={this.props.boxClass} id={this.props.boxId} onClick={this.selectBox}></div>\n    );\n  };\n}\n\nclass Buttons extends Component{\n  render(){\n    let butArray = [];\n    this.props.buttons.map((obj, i) => {\n      butArray.push(<button onClick={obj.eventHandler} key={i}>{obj.name}</button>);\n    });\n    return(\n      <div className=\"btn-container\">\n        {butArray}\n      </div>\n    );\n  }\n}\nclass Grid extends Component{\n  render(){\n    let rowArr = [], boxId, boxClass;\n    try {\n      for(let i = 0; i < this.props.rowNum; i++){\n        for(let j = 0; j < this.props.colNum; j++){\n          boxId = i + '_' + j;\n          boxClass = this.props.gridArr[i][j] ? 'box alive' : 'box dead';\n          rowArr.push(<Box boxClass={boxClass} key={boxId} boxId={boxId} row={i} col={j} selectBox={this.props.selectBox}/>);\n        }\n        \n      }\n      return(\n        <div className=\"grid\" style={{gridTemplateColumns: `repeat(${this.props.colNum}, 10px)`}}>\n          {rowArr}\n        </div>\n      );\n    } catch (grid_err) {\n      console.log(\"loading error for generating grid rows/cols\", grid_err)\n      return <div className=\"grid\"></div>\n    }\n  }\n}\n\nclass App extends Component {\n  constructor(){\n    super();\n    this.buttons = [\n      {eventHandler: this.toggleActiveState, name: 'Play'},\n      {eventHandler: this.randomizeEv, name: 'Randomize'},\n      {eventHandler: this.clearEv, name: 'Clear'},\n      {eventHandler: this.autoMaxGrid, name: 'Maximize Grid'}\n    ];\n    this.state = {\n      rows: 30,\n      cols: 30,\n      user_rows: 30,\n      user_cols: 30,\n      speed: 100,\n      isActive: false,\n      gens: 0,\n      gridArray: Array(30).fill().map(() => Array(30).fill(false)),\n    };\n\n  }\n\n  selectBox = (row, col) => {\n    let gridCopy = cloneArray( Array(this.state.rows).fill().map(() => Array(this.state.cols).fill(false)));\n    gridCopy[row][col] = !gridCopy[row][col];\n    this.setState({\n      gridArray: gridCopy\n    });\n  }\n  autoMaxGrid = () => {\n    const rows = Math.floor(window.innerWidth / 10);\n    const cols = Math.floor(window.innerHeight / 10);\n    this.setState({\n      rows: rows,\n      user_rows: rows,\n      cols: cols,\n      user_cols: cols,\n    });\n    this.clearEv();\n    this.randomize();\n  }\n\n  pauseGame = () => {\n    clearInterval(this.interval);\n    this.buttons[0].name = \"Play\";\n  }\n\n  playGame = () => {\n    clearInterval(this.interval);\n    this.interval = setInterval(this.playFn, this.state.speed);\n    this.buttons[0].name = \"Pause\";\n  }\n  \n  toggleActiveState = () => {\n    if (!this.state.isActive) {\n      this.playGame();\n    }\n    else {\n      this.pauseGame();\n    }\n    this.setState({\n      isActive: !this.state.isActive\n    });\n  }\n\n  randomizeEv = () => {\n    this.randomize();\n  }\n  \n  clearEv = () => {\n    this.pauseGame();\n    let init_board = Array(this.state.rows).fill().map(() => Array(this.state.cols).fill(false));\n    this.setState({\n      gens: 0,\n      gridArray: init_board,\n    });\n  }\n\n  setRows = (event) => {\n    event.preventDefault()\n    const row = Math.floor(event.target.value)\n    if (row < 151) {\n      this.setState({\n        user_rows: row\n      });\n    }\n  }\n\n  setCols = (event) => {\n    event.preventDefault()\n    const col = Math.floor(event.target.value)\n    if (col < 151){\n      this.setState({\n        user_cols: col\n      });\n    }\n  }\n\n  setSpeed = (event) => {\n    event.preventDefault()\n    if (event.target.value < 1001){\n      this.setState({\n        speed: event.target.value\n      });\n    }\n  }\n\n  playFn = () => {\n    let init_board = this.state.gridArray;\n    let count;\n    for(let i = 0; i < this.state.rows; i++){\n      for(let j = 0; j < this.state.cols; j++){\n        count = 0;\n        if(i > 0)\n          count += this.state.gridArray[i - 1].slice(j - 1, j + 2).filter(Boolean).length;\n        if(i < this.state.rows - 1)\n          count += this.state.gridArray[i + 1].slice(j - 1, j + 2).filter(Boolean).length;\n        if(this.state.gridArray[i][j + 1])\n          count++;\n        if(this.state.gridArray[i][j - 1])\n          count++;\n        if(this.state.gridArray[i][j] && (count < 2 || count > 3)) init_board[i][j] = false;\n        if(!this.state.gridArray[i][j] && count === 3) init_board[i][j] = true;\n      }\n    }\n    this.setState({\n      gens: this.state.gens + 1,\n      gridArray: init_board\n    });\n  }\n\n  randomize = () => {\n    let newGrid = Array(this.state.rows).fill().map(() => Array(this.state.cols).fill(false));\n    \n    for(let i = 0; i < this.state.rows; i++){\n      for(let j = 0; j < this.state.cols; j++){\n        // Randomly populates ~40% to cells being alive.\n        if(Math.floor(Math.random() * 2.5) === 1){\n          newGrid[i][j] = true;\n        }\n      }\n    }\n    this.setState({\n      gridArray : newGrid\n    })\n  }\n\n  generateGrid = () => {\n    this.setState({\n      rows: this.state.user_rows,\n      cols: this.state.user_cols\n    });\n    this.clearEv();\n    this.randomize();\n  }\n\n  componentDidMount(){\n    this.clearEv();\n    this.randomize();\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"header\">\n          <h1>Game Of Life</h1>\n          <Buttons buttons={this.buttons}/>\n          <h3>Generations: {this.state.gens} </h3>\n          <div className=\"row-ctn--center\">\n            <div className=\"row-ctn--left\">\n              <span>speed(ms):</span>\n              <input type=\"text\" value={this.state.speed} onChange={this.setSpeed} />\n            </div>\n            <div className=\"row-ctn--left\">\n              <span>rows:</span>\n              <input type=\"text\" value={this.state.user_rows} onChange={this.setRows} />\n            </div>\n            <div className=\"row-ctn--left\">\n              <span>cols:</span>\n              <input type=\"text\" value={this.state.user_cols} onChange={this.setCols} />\n            </div>\n          </div>\n          <div className=\"btn-container\">\n            <button onClick={this.generateGrid}>Generate New Grid</button>\n          </div>\n        </div>\n        <Grid gridArr={this.state.gridArray} rowNum={this.state.rows} colNum={this.state.cols} selectBox={this.selectBox}/>\n      </div>\n    );\n  }\n}\n\n\nfunction cloneArray(array){\n  return JSON.parse(JSON.stringify(array));\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}